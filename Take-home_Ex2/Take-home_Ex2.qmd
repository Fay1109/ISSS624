---
title: "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods"
execute:
   warning: false
   message: false
editor: visual
---

## Overview

## Introduction

Regionalisation is the process of creating regions. It is one of the clustering methods which aims at grouping observations that are similar not only in statistical attributes but also in spatial location. Therefore, regionalisation absorbs the same logic as traditional clustering methods and also applies a series of geographical constraints.

## The Data

### Apstial data

For the purpose of this assignment, data from [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/) will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. You are required to use WPdx+ data set.

### Geospatial data

Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this take-home exercise. The data can be downloaded either from The [Humanitarian Data Exchange](https://data.humdata.org/) portal or [geoBoundaries](https://www.geoboundaries.org/).

## R package

The packages will be used for this analysis:

***sf***: for importing and processing geospatial data,

***tidyverse***: for importing and processing non-spatial data.

```{r}

pacman::p_load(sf, tidyverse, tmap, funModeling, sfdep, rgeoda)
```

# Data Processing and Wrangling

## Importing water point data

```{r}
#| eval: false
wp_nga <- read_csv("data/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria")
```

Convert Well Known Text data

There is a column called *New Georeferenced Column* which represent spatial data in a textual format. And this kind of text file is popularly known as Well Known Text(wkt).

There are two steps to convert this wkt format into a sf data frame.

Firstly, `st_as_sfc()` of sf package is used to derive a new field called Geometry as shown in the code chunk below.

```{r}
#| eval: false
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
```

Next, `st_sf()` will be used to convert the tibble data frame into sf data frame.

```{r}
#| eval: false
wp_sf <- st_sf(wp_nga, crs=4326) 
```

The code chunk below is used to

```{r}
#| eval: false
head(wp_sf)
```

## Importing Nigeria LGA level boundary data

```{r}
#| eval: false
nga <- st_read(dsn="data",
                   layer="nga_admbnda_adm2_osgof_20190417",
               crs=4326)
```

### Checking duplicate area name

`duplicated` can retrieve which elements of a vector or data frame are duplicate. The code chunk below can be used to determine the duplicate elements.

```{r}
#| eval: false
duplicate_area <- nga$`ADM2_EN`[nga$`ADM2_EN` %in% nga$`ADM2_EN`[duplicated(nga$`ADM2_EN`)]]

index <- which(nga$`ADM2_EN` %in% nga$`ADM2_EN`[duplicated(nga$`ADM2_EN`)])

duplicate_area
index
```

There are 12 duplicate elements. Then we can check the location of each element by using tmap.

```{r}
#| eval: false
tmap_mode("view")
tm_shape(nga[nga$`ADM2_EN`  %in% duplicate_area,]) +
  tm_polygons()
```

Then we can compare the map with the google map, and we can find the correct ADM2_EN.

| Index | Original ADM2_EN | Correct ADM2_EN |
|-------|------------------|-----------------|
| 94    | Bassa            | Bassa(Kogi)     |
| 95    | Bassa            | Bassa(Plateau)  |
| 304   | Ifelodun         | Ifelodun(Kwara) |
| 305   | Ifelodun         | Ifelodun(Osun)  |
| 355   | Irepodun         | Irepodun(Kwara) |
| 356   | Irepodun         | Irepodun(Osun)  |
| 519   | Nasarawa         | Nassarawa       |
| 520   | Nasarawa         | Nasarawa        |
| 546   | Obi              | Obi(Benue)      |
| 547   | Obi              | Obi(Nasarawa)   |
| 693   | Surulere         | Surulere(Lagos) |
| 694   | Surulere         | Surulere(Oyo)   |

The code chunk below is used to update the correct ADM2_EN.

```{r}
#| eval: false
nga$`ADM2_EN` [c(94,95,304,305,355,356,519,546,547,693,694)] <- c("Bassa(Kogi)","Bassa(Plateau)",
                                                                               "Ifelodun(Kwara)","Ifelodun(Osun)",
                                                                               "Irepodun (Kwara)","Irepodun(Osun)",
                                                                               "Nassarawa","Obi(Benue)","Obi(Nasarawa)",
                                                                               "Surulere(Lagos)","Surulere(Oyo)")
```

We can whether duplicate elements exist or not now.

```{r}
#| eval: false
length(nga$`ADM2_EN`[ nga$`ADM2_EN` %in% nga$`ADM2_EN`[duplicated(nga$`ADM2_EN`)] ])
```

## Point in Polygon Overlay

Although *wp_sf* sf data frame consists of a field called *#clean_adm2* which by right should provides the LGA name of the water point located. However, it is always a good practice to be more caution when dealing with data accuracy.

We are going to use a geoprocessing function (or commonly know as GIS analysis) called **point-in-polygon overlay** to transfer the attribute information in *nga* sf data frame into *wp_sf* data frame.

```{r}
#| eval: false
wp_sf <- st_join(wp_sf, nga)
```

`write_rds`of readr package is used to save the *wp_sf* data frame into an output file in *rds* data format. The output file is called wp_nga and saved in data sub-folder.

```{r}
#| eval: false
wp_nigeria <- write_rds(wp_sf,
                    "data/wp_nigeria.rds")
```

## Data Wrangling

### Recode NA values into string

The code chunk below is used to recode all the NA values in \#*status_clean* field into Unknown.

```{r}
#| eval: false
wp_nigeria <- read_rds("data/wp_nigeria.rds") %>%
  mutate(`#status_clean`= replace_na(`#status_clean`, "Unknown"))
```

```{r}
#| eval: false
freq(data=wp_nigeria, 
     input = '#status_clean')
```

### Extracting Water Point Data by functional, non-functional and unknown

We are going to extract water point records by using *#status_clean* column.

The code chunk below is used to extract functional water points.

```{r}
#| eval: false
wpt_functional <- wp_nigeria %>%
  filter(`#status_clean` %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

The code chunk below is used to extract non-functional water points.

```{r}
#| eval: false
wpt_nonfunctional <- wp_nigeria %>%
  filter(`#status_clean` %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

The code chunk below is used to extract unknown water points.

```{r}
#| eval: false
wpt_unknown <- wp_nigeria %>%
  filter(`#status_clean`  == "Unknown")
```

### Extracting Water Point Data by main technology

The code chunk below is used to display the distribution of technology adopted by water points.

```{r}
#| eval: false
freq(data=wp_nigeria, 
     input = '#water_tech_category')
```

We are going to categorize the technology into three types: Hand Pump, Mechanized Pump and Unknown(includes NA values, Tapstand, Rope and Bucket).

The code chunk below is used to extract water points by category.

```{r}
#| eval: false
wpt_handpp <- wp_nigeria %>%
  filter(`#water_tech_category` %in%
           c("Hand Pump"))

wpt_mechanizedpp <- wp_nigeria %>%
  filter(`#water_tech_category` %in%
           c("Mechanized Pump"))

```

### Extracting Water Point Data by usage capacity

```{r}
#| eval: false
freq(data=wp_nigeria, 
     input = 'usage_capacity')
```

The code chunk below is used to split *usage\_*capacity into two categories (\<1000 and \>=1000).

```{r}
#| eval: false
wpt_usage_cap_below_1k <- wp_nigeria %>%
  filter(`usage_capacity` %in%
           c("50","250","300"))

wpt_usage_cap_above_1k <- wp_nigeria %>%
  filter(`usage_capacity` %in%
           c("1000"))
```

### Extracting Rural Water Point Data

```{r}
#| eval: false
freq(data=wp_nigeria, 
     input = 'is_urban')
```

```{r}
#| eval: false
wpt_rural <- wp_nigeria %>%
  filter(`is_urban` %in%
           c("FALSE"))
```

### Performing Point-in-Polygon Count

The code chunk below is going to create a new data frame *nigeria_wp* to store the newly-derived variables.

```{r}
#| eval: false
nigeria_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nigeria))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown))) %>%
  mutate(`wpt handpump`=lengths(
    st_intersects(nga, wpt_handpp))) %>%
  mutate(`wpt mechpump`=lengths(
    st_intersects(nga, wpt_mechanizedpp))) %>%
  mutate(`wpt usage_below_1k`=lengths(
    st_intersects(nga, wpt_usage_cap_below_1k))) %>%
  mutate(`wpt usage_above_1k`=lengths(
    st_intersects(nga, wpt_usage_cap_above_1k))) %>%
  mutate(`wpt rural`=lengths(
    st_intersects(nga, wpt_rural)))
  
```

## Saving the Analytical Data Table

The code chunk below is used to generate related percentage.

```{r}
#| eval: false
nigeria_wp <- nigeria_wp %>%
  mutate(`pct_functional` = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%
  mutate(`pct_handpump` = `wpt handpump`/`total wpt`) %>%
  mutate(`pct_mechpump` = `wpt mechpump`/`total wpt`) %>%
  mutate(`pct_usage_below_1k` = `wpt usage_below_1k`/`total wpt`) %>%
  mutate(`pct_usage_above_1k` = `wpt usage_above_1k`/`total wpt`) %>%
  mutate(`pct_rural` = `wpt rural`/`total wpt`) %>%
  select(3:4, 9:10, 18:33)
```

```{r}
#| eval: false
write_rds(nigeria_wp, "data/nigeria_wp.rds")
```

```{r}
#| eval: false
nigeria_wp <- read_rds("data/nigeria_wp.rds")
```

The code chunk below is

```{r}
#| eval: false
summary(nigeria_wp)
```

## Visualizing the spatial distribution of water points

```{r}
#| eval: false
total <- qtm(nigeria_wp, "total wpt")
wp_functional <- qtm(nigeria_wp, "wpt functional")
wp_nonfunctional <- qtm(nigeria_wp, "wpt non-functional")
unknown <- qtm(nigeria_wp, "wpt unknown")

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)
```
